# ETL Pipeline – Assignment 2

## Project Structure

JavaProjectRoot/
├── src/
│ └── org/howard/edu/lsp/assignment2/ETLPipeline.java
├── data/
│ ├── products.csv # input
│ └── transformed_products.csv # output (generated)
└── README.md

## How to Build & Run

Compile:
javac -d out src/org/howard/edu/lsp/assignment2/ETLPipeline.java

Run (from project root so relative data/ path resolves):
java -cp out org.howard.edu.lsp.assignment2.ETLPipeline

## Input Format

- CSV file at `data/products.csv`
- Delimiter: comma
- Header row present
- Columns: ProductID (int), Name (string), Price (decimal), Category (string)
- Fields contain no commas or quotes

## Transform Rules (in order)

1. Convert `Name` to UPPERCASE.
2. If original `Category` is "Electronics", apply 10% discount (multiply by 0.90), then round to two decimals using HALF_UP.
3. If post-discount `Price` > 500.00 **and** original category is "Electronics", set `Category` to "Premium Electronics".
4. Compute `PriceRange` from FINAL price:
   - 0.00–10.00 → Low
   - 10.01–100.00 → Medium
   - 100.01–500.00 → High
   - 500.01+ → Premium

## Output

- File: `data/transformed_products.csv`
- Always writes a header row
- Column order: ProductID,Name,Price,Category,PriceRange

## Error Handling

- Missing input file: prints a clear error and exits (no output file created).
- Empty input (only header): creates output with just the header.
- Malformed rows (bad ints/decimals, wrong column count): skipped (counted in summary).

## Run Summary

At the end, the program prints:

- Rows read (data rows, not including header)
- Rows transformed (written)
- Rows skipped (invalid)
- Output path

## Assumptions

- CSV fields contain no commas or quotes (per spec).
- Input file’s first row is a header and is not transformed.
- Relative paths are resolved from project root.
- Rounding uses BigDecimal with RoundingMode.HALF_UP.

## Brief Design Notes

- Uses standard Java IO and `BigDecimal` for precise monetary math.
- Simple CSV parsing via `String.split(",", -1)` since fields have no commas/quotes.
- Transform order strictly follows the assignment’s requirements.
- Defensive writing: output header is written before any data row processing.
